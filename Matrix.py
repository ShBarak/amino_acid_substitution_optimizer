#!/usr/bin/env python3

import numpy as np
import copy

class Matrix:

	STANDARD_DECONSTRUCTED_INDEX = [((1, 0), ('R', 'A')), ((2, 0), ('N', 'A')), ((2, 1), ('N', 'R')), ((3, 0), ('D', 'A')), ((3, 1), ('D', 'R')), ((3, 2), ('D', 'N')), ((4, 0), ('C', 'A')), ((4, 1), ('C', 'R')), ((4, 2), ('C', 'N')), ((4, 3), ('C', 'D')), ((5, 0), ('Q', 'A')), ((5, 1), ('Q', 'R')), ((5, 2), ('Q', 'N')), ((5, 3), ('Q', 'D')), ((5, 4), ('Q', 'C')), ((6, 0), ('E', 'A')), ((6, 1), ('E', 'R')), ((6, 2), ('E', 'N')), ((6, 3), ('E', 'D')), ((6, 4), ('E', 'C')), ((6, 5), ('E', 'Q')), ((7, 0), ('G', 'A')), ((7, 1), ('G', 'R')), ((7, 2), ('G', 'N')), ((7, 3), ('G', 'D')), ((7, 4), ('G', 'C')), ((7, 5), ('G', 'Q')), ((7, 6), ('G', 'E')), ((8, 0), ('H', 'A')), ((8, 1), ('H', 'R')), ((8, 2), ('H', 'N')), ((8, 3), ('H', 'D')), ((8, 4), ('H', 'C')), ((8, 5), ('H', 'Q')), ((8, 6), ('H', 'E')), ((8, 7), ('H', 'G')), ((9, 0), ('I', 'A')), ((9, 1), ('I', 'R')), ((9, 2), ('I', 'N')), ((9, 3), ('I', 'D')), ((9, 4), ('I', 'C')), ((9, 5), ('I', 'Q')), ((9, 6), ('I', 'E')), ((9, 7), ('I', 'G')), ((9, 8), ('I', 'H')), ((10, 0), ('L', 'A')), ((10, 1), ('L', 'R')), ((10, 2), ('L', 'N')), ((10, 3), ('L', 'D')), ((10, 4), ('L', 'C')), ((10, 5), ('L', 'Q')), ((10, 6), ('L', 'E')), ((10, 7), ('L', 'G')), ((10, 8), ('L', 'H')), ((10, 9), ('L', 'I')), ((11, 0), ('K', 'A')), ((11, 1), ('K', 'R')), ((11, 2), ('K', 'N')), ((11, 3), ('K', 'D')), ((11, 4), ('K', 'C')), ((11, 5), ('K', 'Q')), ((11, 6), ('K', 'E')), ((11, 7), ('K', 'G')), ((11, 8), ('K', 'H')), ((11, 9), ('K', 'I')), ((11, 10), ('K', 'L')), ((12, 0), ('M', 'A')), ((12, 1), ('M', 'R')), ((12, 2), ('M', 'N')), ((12, 3), ('M', 'D')), ((12, 4), ('M', 'C')), ((12, 5), ('M', 'Q')), ((12, 6), ('M', 'E')), ((12, 7), ('M', 'G')), ((12, 8), ('M', 'H')), ((12, 9), ('M', 'I')), ((12, 10), ('M', 'L')), ((12, 11), ('M', 'K')), ((13, 0), ('F', 'A')), ((13, 1), ('F', 'R')), ((13, 2), ('F', 'N')), ((13, 3), ('F', 'D')), ((13, 4), ('F', 'C')), ((13, 5), ('F', 'Q')), ((13, 6), ('F', 'E')), ((13, 7), ('F', 'G')), ((13, 8), ('F', 'H')), ((13, 9), ('F', 'I')), ((13, 10), ('F', 'L')), ((13, 11), ('F', 'K')), ((13, 12), ('F', 'M')), ((14, 0), ('P', 'A')), ((14, 1), ('P', 'R')), ((14, 2), ('P', 'N')), ((14, 3), ('P', 'D')), ((14, 4), ('P', 'C')), ((14, 5), ('P', 'Q')), ((14, 6), ('P', 'E')), ((14, 7), ('P', 'G')), ((14, 8), ('P', 'H')), ((14, 9), ('P', 'I')), ((14, 10), ('P', 'L')), ((14, 11), ('P', 'K')), ((14, 12), ('P', 'M')), ((14, 13), ('P', 'F')), ((15, 0), ('S', 'A')), ((15, 1), ('S', 'R')), ((15, 2), ('S', 'N')), ((15, 3), ('S', 'D')), ((15, 4), ('S', 'C')), ((15, 5), ('S', 'Q')), ((15, 6), ('S', 'E')), ((15, 7), ('S', 'G')), ((15, 8), ('S', 'H')), ((15, 9), ('S', 'I')), ((15, 10), ('S', 'L')), ((15, 11), ('S', 'K')), ((15, 12), ('S', 'M')), ((15, 13), ('S', 'F')), ((15, 14), ('S', 'P')), ((16, 0), ('T', 'A')), ((16, 1), ('T', 'R')), ((16, 2), ('T', 'N')), ((16, 3), ('T', 'D')), ((16, 4), ('T', 'C')), ((16, 5), ('T', 'Q')), ((16, 6), ('T', 'E')), ((16, 7), ('T', 'G')), ((16, 8), ('T', 'H')), ((16, 9), ('T', 'I')), ((16, 10), ('T', 'L')), ((16, 11), ('T', 'K')), ((16, 12), ('T', 'M')), ((16, 13), ('T', 'F')), ((16, 14), ('T', 'P')), ((16, 15), ('T', 'S')), ((17, 0), ('W', 'A')), ((17, 1), ('W', 'R')), ((17, 2), ('W', 'N')), ((17, 3), ('W', 'D')), ((17, 4), ('W', 'C')), ((17, 5), ('W', 'Q')), ((17, 6), ('W', 'E')), ((17, 7), ('W', 'G')), ((17, 8), ('W', 'H')), ((17, 9), ('W', 'I')), ((17, 10), ('W', 'L')), ((17, 11), ('W', 'K')), ((17, 12), ('W', 'M')), ((17, 13), ('W', 'F')), ((17, 14), ('W', 'P')), ((17, 15), ('W', 'S')), ((17, 16), ('W', 'T')), ((18, 0), ('Y', 'A')), ((18, 1), ('Y', 'R')), ((18, 2), ('Y', 'N')), ((18, 3), ('Y', 'D')), ((18, 4), ('Y', 'C')), ((18, 5), ('Y', 'Q')), ((18, 6), ('Y', 'E')), ((18, 7), ('Y', 'G')), ((18, 8), ('Y', 'H')), ((18, 9), ('Y', 'I')), ((18, 10), ('Y', 'L')), ((18, 11), ('Y', 'K')), ((18, 12), ('Y', 'M')), ((18, 13), ('Y', 'F')), ((18, 14), ('Y', 'P')), ((18, 15), ('Y', 'S')), ((18, 16), ('Y', 'T')), ((18, 17), ('Y', 'W')), ((19, 0), ('V', 'A')), ((19, 1), ('V', 'R')), ((19, 2), ('V', 'N')), ((19, 3), ('V', 'D')), ((19, 4), ('V', 'C')), ((19, 5), ('V', 'Q')), ((19, 6), ('V', 'E')), ((19, 7), ('V', 'G')), ((19, 8), ('V', 'H')), ((19, 9), ('V', 'I')), ((19, 10), ('V', 'L')), ((19, 11), ('V', 'K')), ((19, 12), ('V', 'M')), ((19, 13), ('V', 'F')), ((19, 14), ('V', 'P')), ((19, 15), ('V', 'S')), ((19, 16), ('V', 'T')), ((19, 17), ('V', 'W')), ((19, 18), ('V', 'Y'))]
	STANDARD_IND_TO_DECONSTRUCTED = {(1, 0): 0.0, (2, 0): 1.0, (2, 1): 2.0, (3, 0): 3.0, (3, 1): 4.0, (3, 2): 5.0, (4, 0): 6.0, (4, 1): 7.0, (4, 2): 8.0, (4, 3): 9.0, (5, 0): 10.0, (5, 1): 11.0, (5, 2): 12.0, (5, 3): 13.0, (5, 4): 14.0, (6, 0): 15.0, (6, 1): 16.0, (6, 2): 17.0, (6, 3): 18.0, (6, 4): 19.0, (6, 5): 20.0, (7, 0): 21.0, (7, 1): 22.0, (7, 2): 23.0, (7, 3): 24.0, (7, 4): 25.0, (7, 5): 26.0, (7, 6): 27.0, (8, 0): 28.0, (8, 1): 29.0, (8, 2): 30.0, (8, 3): 31.0, (8, 4): 32.0, (8, 5): 33.0, (8, 6): 34.0, (8, 7): 35.0, (9, 0): 36.0, (9, 1): 37.0, (9, 2): 38.0, (9, 3): 39.0, (9, 4): 40.0, (9, 5): 41.0, (9, 6): 42.0, (9, 7): 43.0, (9, 8): 44.0, (10, 0): 45.0, (10, 1): 46.0, (10, 2): 47.0, (10, 3): 48.0, (10, 4): 49.0, (10, 5): 50.0, (10, 6): 51.0, (10, 7): 52.0, (10, 8): 53.0, (10, 9): 54.0, (11, 0): 55.0, (11, 1): 56.0, (11, 2): 57.0, (11, 3): 58.0, (11, 4): 59.0, (11, 5): 60.0, (11, 6): 61.0, (11, 7): 62.0, (11, 8): 63.0, (11, 9): 64.0, (11, 10): 65.0, (12, 0): 66.0, (12, 1): 67.0, (12, 2): 68.0, (12, 3): 69.0, (12, 4): 70.0, (12, 5): 71.0, (12, 6): 72.0, (12, 7): 73.0, (12, 8): 74.0, (12, 9): 75.0, (12, 10): 76.0, (12, 11): 77.0, (13, 0): 78.0, (13, 1): 79.0, (13, 2): 80.0, (13, 3): 81.0, (13, 4): 82.0, (13, 5): 83.0, (13, 6): 84.0, (13, 7): 85.0, (13, 8): 86.0, (13, 9): 87.0, (13, 10): 88.0, (13, 11): 89.0, (13, 12): 90.0, (14, 0): 91.0, (14, 1): 92.0, (14, 2): 93.0, (14, 3): 94.0, (14, 4): 95.0, (14, 5): 96.0, (14, 6): 97.0, (14, 7): 98.0, (14, 8): 99.0, (14, 9): 100.0, (14, 10): 101.0, (14, 11): 102.0, (14, 12): 103.0, (14, 13): 104.0, (15, 0): 105.0, (15, 1): 106.0, (15, 2): 107.0, (15, 3): 108.0, (15, 4): 109.0, (15, 5): 110.0, (15, 6): 111.0, (15, 7): 112.0, (15, 8): 113.0, (15, 9): 114.0, (15, 10): 115.0, (15, 11): 116.0, (15, 12): 117.0, (15, 13): 118.0, (15, 14): 119.0, (16, 0): 120.0, (16, 1): 121.0, (16, 2): 122.0, (16, 3): 123.0, (16, 4): 124.0, (16, 5): 125.0, (16, 6): 126.0, (16, 7): 127.0, (16, 8): 128.0, (16, 9): 129.0, (16, 10): 130.0, (16, 11): 131.0, (16, 12): 132.0, (16, 13): 133.0, (16, 14): 134.0, (16, 15): 135.0, (17, 0): 136.0, (17, 1): 137.0, (17, 2): 138.0, (17, 3): 139.0, (17, 4): 140.0, (17, 5): 141.0, (17, 6): 142.0, (17, 7): 143.0, (17, 8): 144.0, (17, 9): 145.0, (17, 10): 146.0, (17, 11): 147.0, (17, 12): 148.0, (17, 13): 149.0, (17, 14): 150.0, (17, 15): 151.0, (17, 16): 152.0, (18, 0): 153.0, (18, 1): 154.0, (18, 2): 155.0, (18, 3): 156.0, (18, 4): 157.0, (18, 5): 158.0, (18, 6): 159.0, (18, 7): 160.0, (18, 8): 161.0, (18, 9): 162.0, (18, 10): 163.0, (18, 11): 164.0, (18, 12): 165.0, (18, 13): 166.0, (18, 14): 167.0, (18, 15): 168.0, (18, 16): 169.0, (18, 17): 170.0, (19, 0): 171.0, (19, 1): 172.0, (19, 2): 173.0, (19, 3): 174.0, (19, 4): 175.0, (19, 5): 176.0, (19, 6): 177.0, (19, 7): 178.0, (19, 8): 179.0, (19, 9): 180.0, (19, 10): 181.0, (19, 11): 182.0, (19, 12): 183.0, (19, 13): 184.0, (19, 14): 185.0, (19, 15): 186.0, (19, 16): 187.0, (19, 17): 188.0, (19, 18): 189.0}
	STANDARD_AB_TO_DECONSTRUCTED = {('R', 'A'): 0.0, ('N', 'A'): 1.0, ('N', 'R'): 2.0, ('D', 'A'): 3.0, ('D', 'R'): 4.0, ('D', 'N'): 5.0, ('C', 'A'): 6.0, ('C', 'R'): 7.0, ('C', 'N'): 8.0, ('C', 'D'): 9.0, ('Q', 'A'): 10.0, ('Q', 'R'): 11.0, ('Q', 'N'): 12.0, ('Q', 'D'): 13.0, ('Q', 'C'): 14.0, ('E', 'A'): 15.0, ('E', 'R'): 16.0, ('E', 'N'): 17.0, ('E', 'D'): 18.0, ('E', 'C'): 19.0, ('E', 'Q'): 20.0, ('G', 'A'): 21.0, ('G', 'R'): 22.0, ('G', 'N'): 23.0, ('G', 'D'): 24.0, ('G', 'C'): 25.0, ('G', 'Q'): 26.0, ('G', 'E'): 27.0, ('H', 'A'): 28.0, ('H', 'R'): 29.0, ('H', 'N'): 30.0, ('H', 'D'): 31.0, ('H', 'C'): 32.0, ('H', 'Q'): 33.0, ('H', 'E'): 34.0, ('H', 'G'): 35.0, ('I', 'A'): 36.0, ('I', 'R'): 37.0, ('I', 'N'): 38.0, ('I', 'D'): 39.0, ('I', 'C'): 40.0, ('I', 'Q'): 41.0, ('I', 'E'): 42.0, ('I', 'G'): 43.0, ('I', 'H'): 44.0, ('L', 'A'): 45.0, ('L', 'R'): 46.0, ('L', 'N'): 47.0, ('L', 'D'): 48.0, ('L', 'C'): 49.0, ('L', 'Q'): 50.0, ('L', 'E'): 51.0, ('L', 'G'): 52.0, ('L', 'H'): 53.0, ('L', 'I'): 54.0, ('K', 'A'): 55.0, ('K', 'R'): 56.0, ('K', 'N'): 57.0, ('K', 'D'): 58.0, ('K', 'C'): 59.0, ('K', 'Q'): 60.0, ('K', 'E'): 61.0, ('K', 'G'): 62.0, ('K', 'H'): 63.0, ('K', 'I'): 64.0, ('K', 'L'): 65.0, ('M', 'A'): 66.0, ('M', 'R'): 67.0, ('M', 'N'): 68.0, ('M', 'D'): 69.0, ('M', 'C'): 70.0, ('M', 'Q'): 71.0, ('M', 'E'): 72.0, ('M', 'G'): 73.0, ('M', 'H'): 74.0, ('M', 'I'): 75.0, ('M', 'L'): 76.0, ('M', 'K'): 77.0, ('F', 'A'): 78.0, ('F', 'R'): 79.0, ('F', 'N'): 80.0, ('F', 'D'): 81.0, ('F', 'C'): 82.0, ('F', 'Q'): 83.0, ('F', 'E'): 84.0, ('F', 'G'): 85.0, ('F', 'H'): 86.0, ('F', 'I'): 87.0, ('F', 'L'): 88.0, ('F', 'K'): 89.0, ('F', 'M'): 90.0, ('P', 'A'): 91.0, ('P', 'R'): 92.0, ('P', 'N'): 93.0, ('P', 'D'): 94.0, ('P', 'C'): 95.0, ('P', 'Q'): 96.0, ('P', 'E'): 97.0, ('P', 'G'): 98.0, ('P', 'H'): 99.0, ('P', 'I'): 100.0, ('P', 'L'): 101.0, ('P', 'K'): 102.0, ('P', 'M'): 103.0, ('P', 'F'): 104.0, ('S', 'A'): 105.0, ('S', 'R'): 106.0, ('S', 'N'): 107.0, ('S', 'D'): 108.0, ('S', 'C'): 109.0, ('S', 'Q'): 110.0, ('S', 'E'): 111.0, ('S', 'G'): 112.0, ('S', 'H'): 113.0, ('S', 'I'): 114.0, ('S', 'L'): 115.0, ('S', 'K'): 116.0, ('S', 'M'): 117.0, ('S', 'F'): 118.0, ('S', 'P'): 119.0, ('T', 'A'): 120.0, ('T', 'R'): 121.0, ('T', 'N'): 122.0, ('T', 'D'): 123.0, ('T', 'C'): 124.0, ('T', 'Q'): 125.0, ('T', 'E'): 126.0, ('T', 'G'): 127.0, ('T', 'H'): 128.0, ('T', 'I'): 129.0, ('T', 'L'): 130.0, ('T', 'K'): 131.0, ('T', 'M'): 132.0, ('T', 'F'): 133.0, ('T', 'P'): 134.0, ('T', 'S'): 135.0, ('W', 'A'): 136.0, ('W', 'R'): 137.0, ('W', 'N'): 138.0, ('W', 'D'): 139.0, ('W', 'C'): 140.0, ('W', 'Q'): 141.0, ('W', 'E'): 142.0, ('W', 'G'): 143.0, ('W', 'H'): 144.0, ('W', 'I'): 145.0, ('W', 'L'): 146.0, ('W', 'K'): 147.0, ('W', 'M'): 148.0, ('W', 'F'): 149.0, ('W', 'P'): 150.0, ('W', 'S'): 151.0, ('W', 'T'): 152.0, ('Y', 'A'): 153.0, ('Y', 'R'): 154.0, ('Y', 'N'): 155.0, ('Y', 'D'): 156.0, ('Y', 'C'): 157.0, ('Y', 'Q'): 158.0, ('Y', 'E'): 159.0, ('Y', 'G'): 160.0, ('Y', 'H'): 161.0, ('Y', 'I'): 162.0, ('Y', 'L'): 163.0, ('Y', 'K'): 164.0, ('Y', 'M'): 165.0, ('Y', 'F'): 166.0, ('Y', 'P'): 167.0, ('Y', 'S'): 168.0, ('Y', 'T'): 169.0, ('Y', 'W'): 170.0, ('V', 'A'): 171.0, ('V', 'R'): 172.0, ('V', 'N'): 173.0, ('V', 'D'): 174.0, ('V', 'C'): 175.0, ('V', 'Q'): 176.0, ('V', 'E'): 177.0, ('V', 'G'): 178.0, ('V', 'H'): 179.0, ('V', 'I'): 180.0, ('V', 'L'): 181.0, ('V', 'K'): 182.0, ('V', 'M'): 183.0, ('V', 'F'): 184.0, ('V', 'P'): 185.0, ('V', 'S'): 186.0, ('V', 'T'): 187.0, ('V', 'W'): 188.0, ('V', 'Y'): 189.0}

	def __init__(self, matrix, index_order, standard_alphabeth = True):
		self.matrix = matrix
		self.index_order = index_order
		self.clean_order = self.index_order.replace(" ","")
		self.n = len(self.clean_order)
		if standard_alphabeth:
			self.deconstructed_index = Matrix.STANDARD_DECONSTRUCTED_INDEX
			self.ind_to_deconstructed = Matrix.STANDARD_IND_TO_DECONSTRUCTED
			self.ab_to_deconstructed = Matrix.STANDARD_AB_TO_DECONSTRUCTED
		else:
			self.deconstructed_index, self.ind_to_deconstructed, self.ab_to_deconstructed = self.generate_indices()
			
	def generate_indices(self):
		indices = []
		ab_reverse = {}
		ind_reverse = {}
		for i in range(self.n):
			for j in range(i):
				index = (((i-1)**2+(i-1))/2)+j
				ab_parts = (self.clean_order[i], self.clean_order[j])
				ind_parts = (i,j)
				indices.append((ind_parts, ab_parts))
				ab_reverse[ab_parts] = index
				ind_reverse[ind_parts] = index
		return indices, ind_reverse, ab_reverse

	def generate_altered_matrix(self, params):
		n = len(params)
		edited_mat = copy.deepcopy(self.matrix)
		for i in range(n):
			a,b = self.get_ind_parts_from_index(i)
			edited_mat[a,b] += params[i]
		return Matrix(edited_mat, self.index_order)
	
	def normalize_matrix(self):
		total = float(self.get_total_sum())
		self.matrix = self.matrix / total
	
	def multiply_matrix(self, scale):
		self.matrix = np.multiply(self.matrix, scale)

	def get_total_sum(self):
		return np.sum(self.matrix)
	
	def get_average(self):
		return np.average(self.matrix)
	
	def deconstract_values(self):
		values = []
		n = len(self.deconstructed_index)
		for i in range(n):
			values.append(self.get_item_by_index(self.get_ind_parts_from_index(i)))
		return np.array(values)
	
	def get_ab_parts_from_index(self, i):
		return self.deconstructed_index[i][1]
	
	def get_ind_parts_from_index(self, i):
		return self.deconstructed_index[i][0]
	
	def get_index_from_ab(self, a, b):
		ia = self.clean_order.index(a)
		ib = self.clean_order.index(b)
		return self.get_index_from_ij(ia, ib)
	
	def get_index_from_ij(self, i, j):
		if i > j:
			return (i, j)
		return (j, i)
	
	def get_item(self, i, j):
		if i > j:
			return self.matrix[i, j]
		return self.matrix[j, i]
	
	def get_item_by_ab(self, a, b):
		ind = self.get_index_from_ab(a, b)
		return self.get_item_by_index(ind)
	
	def get_item_by_index(self, index):
		return self.matrix[index]
	
	def get_deconstructed_index(self):
		return self.deconstructed_index
	
	def get_ab(self):
		return self.index_order.split(" ")
	
	def get_matrix(self):
		return self.matrix
	
	def __str__(self):
		return str(self.matrix)